types GameTooltipTypes
{
	type cooltip_type = widget {
		name = "character_tooltip"
		alwaystransparent = no
		using = GeneralTooltipSetup

		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
			block "bg_visible" {
				visible = yes
			}
		}

		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 15 15 }
			margin_top = 3
			maximumsize = { 600 -1 }

			## REAL CHARACTERS
			vbox = {
				visible = "[Character.IsValid]"
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "personal"
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							name = "name_etc"
							layoutpolicy_horizontal = expanding
							minimumsize = { 0 35 }

							## Name
							hbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 8
								margin_right = 7

								background = {
									using = Background_Area
									margin = { 15 0 }
									margin_bottom = 7
								}

								vbox = {
									layoutpolicy_vertical = expanding
									margin_top = 3

									portrait_opinion = {
										visible = "[And( Character.IsAlive, Not( Character.IsPlayer ) )]"
									}

									expand = {}
								}

								spacer = {
									visible = "[And( Character.IsAlive, Not( Character.IsPlayer ) )]"
									size = { 8 5 }
								}

								text_multi = {
									name = "character_name"
									text = "CHARACTER_TT_NAME_AGE"
									default_format = "#high"
									using = Font_Size_Medium
									max_width = 350
									autoresize = yes
								}

								vbox = {
									layoutpolicy_vertical = expanding
									margin_left = 5

									icon = {
										visible = "[Not(Character.IsDeadAndValid)]"
										size = { 23 23 }
										framesize = { 60 60 }
										frame = "[Character.GetHealthIconFrame]"
										texture = "gfx/interface/icons/character_status/icon_health.dds"
										tooltip = "[Character.GetHealthInfo]"
									}

									expand = {}
								}

								expand = {}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							name = "character_relation_to_you"
							margin_top = 10
							max_width = 308
							text = "[Character.GetRelationToString( GetPlayer )]"
							tooltip = "EXTENDED_RELATIONS_TOOLTIP"
							default_format = "#high"
							align = nobaseline
							autoresize = yes
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 10
						margin_bottom = 10

						hbox = {
							name = "AI_personality"
							layoutpolicy_horizontal = expanding
							spacing = 2

							text_single = {
								visible = "[Not( Character.IsPlayer )]"
								text = "[Character.GetAIPersonalityNoTooltip]"
								default_format = "#L"
								tooltip = "AI_PERSONALITY_TT"
								align = nobaseline
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								#icon = {
								#	visible = "[Not(Character.IsFemale)]"
								#	size = { 20 20 }
								#	framesize = { 40 40 }
								#	frame = "[Character.GetSexualityFrame]"
								#	texture = "gfx/interface/icons/character_status/sexuality_icons_male.dds"
								#	tooltip = "SEXUALITY_TT"
								#}

								#icon = {
								#	visible = "[Character.IsFemale]"
								#	size = { 20 20 }
								#	framesize = { 40 40 }
								#	frame = "[Character.GetSexualityFrame]"
								#	texture = "gfx/interface/icons/character_status/sexuality_icons_female.dds"
								#	tooltip = "SEXUALITY_TT"
								#}

								portrait_status_icons = {
									blockoverride "direction"
									{
										direction = horizontal
									}
									blockoverride "background" {}
								}

								expand = {}
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[Character.IsAlive]"
								text = "[Character.Custom('CooltipSpouseListing')]"
								layoutpolicy_horizontal = expanding
								align = nobaseline
								max_width = 350
							}

							expand = {}
						}

						text_single = {
							visible = "[And( Character.IsAlive, Not( Character.IsImprisoned ) )]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_LOCATION_TOOLTIP"
							align = nobaseline

						}

						text_single = {
							visible = "[And( Character.IsAlive, Character.IsImprisoned )]"
							layoutpolicy_horizontal = expanding
							text = "CHARACTER_IMPRISONED_TOOLTIP"
							align = nobaseline
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						background = {
							using = Background_Area
							margin = { 15 0 }
						}

						hbox = {
							name = "faith_and_culture"

							button_religion_icon = {
								name = "faith_button"
								datacontext = "[Character.GetFaith]"
								size = { 45 45 }
							}

							vbox = {
								margin_right = 10
								margin_left = 3

								text_single = {
									datacontext = "[Character.GetFaith]"
									layoutpolicy_horizontal = expanding
									text = "FAITH_COOLTIP_WINDOW"
									align = nobaseline

									tooltipwidget = { faith_tooltip_click = {} }

									button_normal = {
										size = { 100% 100% }
										onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
									}

								}

								text_single = {
									datacontext = "[Character.GetCulture]"
									layoutpolicy_horizontal = expanding
									text = "CULTURE_COOLTIP_WINDOW"
									align = nobaseline

									button_normal = {
										size = { 100% 100% }
										onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
										# shortcut = "innovations_window"
									}
								}
							}
						}

						hbox = {
							name = "house"
							datacontext = "[Character.GetHouse]"
							margin = { 10 5 }

							coa_house_small = {
								container = {
									name = "characters_status_in_house"
									parentanchor = bottom|right

									icon = {
										name = "bastard"
										visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
										framesize = { 40 40 }
										frame = 4
										size = { 25 25 }
										texture = "gfx/interface/icons/portraits/relation.dds"
										tooltip = "CV_TT_BASTARD"
									}

									icon = {
										name = "head_icon"
										size = { 20 20 }
										visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"

										texture = "gfx/interface/icons/portraits/relation.dds"
										framesize = { 40 40 }
										frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
										tooltip = "[Character.GetDynastyHeadTooltip]"
									}
								}
							}

							text_multi = {
								visible = "[Character.HasDynasty]"
								margin = { 5 0 }
								text = "HOUSE_VIEW_NAME_WITH_HOUSE"
								max_width = 100
								autoresize = yes
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Character.HasLandedTitles]"
					margin = { 0 5 }
					spacing = 5

					coa_realm_small_crown = {
						name = "realm_flag"

						blockoverride "coa_hover_glow_visible"
						{
							visible = no
						}
					}

					realm_name_and_type_vbox = {
						datacontext = "[Character.GetPrimaryTitle]"
					}
				}


				block "extra_info" { }

				# Keep this here for now, may want something in character view
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetHeirToDesc]"
				}

				# mostly for pope
				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_BIRTH_NAME_TOOLTIP"
					visible = "[Character.HasRegnalName]"
				}

				spacer = {
					size = { 10 10 }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					block "interaction_info" { }
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "[Character.GetDebugTooltip]"
					visible = "[InDebugMode]"
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					text = "CHARACTER_KILLER_TOOLTIP"
					visible = "[And( InDebugMode, Character.GetKiller.IsValid )]"
				}

				cooltip_paragraph = {
					layoutpolicy_horizontal	= expanding
					raw_text = "[GetAnimationTooltip( PdxGuiWidget.Self, Character.Self )]"
					visible = "[ShouldShowAnimationInfo]"
				}
			}

			## NULL CHARACTER
			vbox = {
				visible = "[Not( Character.IsValid )]"

				cooltip_paragraph = {
					block "portrait_button_no_character_text"
					{
						text = "CHARACTER_TOOLTIP_NO_PORTRAIT"
					}
				}
			}
		}
	}
}